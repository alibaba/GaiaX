apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'maven-publish'


allprojects {
    repositories {
        mavenLocal()
        google()
        mavenCentral()
        maven { url "https://jitpack.io" }
    }
}


buildscript {

    ext.kotlin_version = '1.5.31'

    repositories {
        mavenLocal()
        google()
        mavenCentral()
        maven { url "https://jitpack.io" }
    }

    dependencies {
        classpath "com.android.tools.build:gradle:4.2.2"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

android {

    compileSdkVersion 30

    defaultConfig {
        minSdkVersion 18
        targetSdkVersion 30
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        externalNativeBuild {
            cmake {
                arguments '-DCMAKE_VERBOSE_MAKEFILE:BOOL=ON'
            }
        }
    }

    buildTypes {
        debug {
            debuggable true
            ndk {
                abiFilters 'arm64-v8a', "x86", "x86_64", 'armeabi-v7a'
            }
        }
        release {
            debuggable false
            ndk {
                abiFilters 'arm64-v8a', 'armeabi-v7a'
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    externalNativeBuild {
        cmake {
            path 'src/main/c/CMakeLists.txt'
        }
    }

    lintOptions {
        abortOnError false
    }

    sourceSets {
        main.java.srcDirs = ['src/main/kotlin', 'src/main/java']
        test {
            resources.srcDirs += ['src/test/resources']
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    ndkVersion '23.1.7779620'

    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation 'androidx.annotation:annotation:1.0.0'
}

afterEvaluate {
    publishing {
        publications {
            // Creates a Maven publication called "release".
            release(MavenPublication) {

                if (project.hasProperty("type")) {
                    if (project.getProperty("type").equals("release")) {
                        from components.release
                    } else {
                        from components.debug
                    }
                } else {
                    from components.debug
                }

                if (project.hasProperty("version")) {
                    version = project.getProperty("version")
                } else {
                    version = '0.0.0'
                }

                if (project.hasProperty("group")) {
                    groupId = project.getProperty("group")
                } else {
                    groupId = 'com.github.alibaba.GaiaX'
                }

                artifactId = 'GaiaX-QuickJS'
            }
        }
    }
}
